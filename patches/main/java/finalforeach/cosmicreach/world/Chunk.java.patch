diff --git a/src/main/java/finalforeach/cosmicreach/world/Chunk.java b/src/main/java/finalforeach/cosmicreach/world/Chunk.java
index 4720993..bdcc389 100644
--- a/src/main/java/finalforeach/cosmicreach/world/Chunk.java
+++ b/src/main/java/finalforeach/cosmicreach/world/Chunk.java
@@ -26,6 +26,7 @@ import finalforeach.cosmicreach.util.IPoint3DMap;
 import finalforeach.cosmicreach.util.Point3DMap;
 import java.util.function.Consumer;
 
+@SuppressWarnings({"unchecked", "unused"})
 public class Chunk implements ISavedChunk<BlockState> {
    public static final int CHUNK_WIDTH = 16;
    public static final int NUM_BLOCKS_IN_CHUNK = 4096;
@@ -74,7 +75,8 @@ public class Chunk implements ISavedChunk<BlockState> {
    public BlockEntity setBlockEntity(BlockState blockState, int localX, int localY, int localZ) {
       Block block = blockState != null ? blockState.getBlock() : null;
       if (this.blockEntities == null) {
-         if (block.blockEntityId == null) {
+          assert block != null;
+          if (block.blockEntityId == null) {
             return null;
          }
 
@@ -92,7 +94,8 @@ public class Chunk implements ISavedChunk<BlockState> {
          }
       }
 
-      if (block.blockEntityId != null) {
+       assert block != null;
+       if (block.blockEntityId != null) {
          BlockEntity blockEntity = BlockEntityCreator.get(blockState, this.blockX + localX, this.blockY + localY, this.blockZ + localZ);
          this.blockEntities.put(blockEntity, localX, localY, localZ);
          blockEntity.onCreate(blockState);
@@ -149,17 +152,16 @@ public class Chunk implements ISavedChunk<BlockState> {
 
    @Override
    public int getMaxNonEmptyBlockIdxYXZ() {
-      IBlockData numBlocksPerLayer = this.blockData;
+      IBlockData<BlockState> numBlocksPerLayer = this.blockData;
       if (!(numBlocksPerLayer instanceof LayeredBlockData)) {
          return 4096;
       } else {
-         LayeredBlockData<BlockState> layered = (LayeredBlockData)numBlocksPerLayer;
-         int numBlocksPerLayer = 256;
+         LayeredBlockData<BlockState> layered = (LayeredBlockData<BlockState>) numBlocksPerLayer;
          int max = 4096;
 
          for(int l = 15; l >= 0; --l) {
             IBlockLayer<BlockState> layer = layered.getLayer(l);
-            if (layer instanceof BlockSingleLayer s) {
+            if (layer instanceof BlockSingleLayer<BlockState> s)  {
                BlockState block = s.blockValue;
                if (!block.hasEmptyModel()) {
                   break;
@@ -308,7 +310,7 @@ public class Chunk implements ISavedChunk<BlockState> {
             }
          }
       } else if (this.blockEntities != null && this.blockEntities.size() > 0) {
-         this.blockEntities.forEach(blockEntity -> blockEntity.onRemove());
+         this.blockEntities.forEach(BlockEntity::onRemove);
          this.blockEntities = null;
       }
    }
