diff --git a/src/main/java/finalforeach/cosmicreach/BlockSelection.java b/src/main/java/finalforeach/cosmicreach/BlockSelection.java
index ea88d66..eed11f4 100644
--- a/src/main/java/finalforeach/cosmicreach/BlockSelection.java
+++ b/src/main/java/finalforeach/cosmicreach/BlockSelection.java
@@ -31,6 +31,7 @@ import finalforeach.cosmicreach.world.Zone;
 import java.util.HashMap;
 import java.util.Map;
 
+
 public class BlockSelection {
    public static ShapeRenderer shapeRenderer = new ShapeRenderer();
    public static boolean enabled;
@@ -38,7 +39,7 @@ public class BlockSelection {
    private static BlockState selectedBlockState;
    private BlockPosition lastSelectedBlockPos;
    private static BlockPosition selectedBlockPos;
-   private Array<BoundingBox> blockBoundingBoxes = new Array<>(false, 4, BoundingBox.class);
+   private final Array<BoundingBox> blockBoundingBoxes = new Array<>(false, 4, BoundingBox.class);
    private LightPropagator lightPropagator = new LightPropagator();
    private Ray ray = new Ray();
    private BoundingBox tmpBoundingBox = new BoundingBox();
@@ -52,12 +53,12 @@ public class BlockSelection {
    private Vector3 mouseCoords2 = new Vector3();
    private Array<BoundingBox> tmpBoundingBoxes = new Array<>(BoundingBox.class);
    private static Array<BlockPosition> positionsToFree = new Array<>();
-   static Pool<BlockPosition> positionPool = new Pool<BlockPosition>() {
-      protected BlockPosition newObject() {
-         PooledBlockPosition<BlockPosition> p = new PooledBlockPosition<>(BlockSelection.positionPool, null, 0, 0, 0);
-         BlockSelection.positionsToFree.add(p);
-         return p;
-      }
+   static Pool<BlockPosition> positionPool = new Pool<>() {
+       protected BlockPosition newObject() {
+           PooledBlockPosition<BlockPosition> p = new PooledBlockPosition<>(BlockSelection.positionPool, null, 0, 0, 0);
+           BlockSelection.positionsToFree.add(p);
+           return p;
+       }
    };
 
    public static BlockState getBlockLookingAt() {
@@ -156,9 +157,9 @@ public class BlockSelection {
          this.workingPos.set(this.ray.origin);
 
          for(; this.workingPos.dst(this.ray.origin) <= this.maximumRaycastDist; this.workingPos.add(this.ray.direction)) {
-            int bx = (int)Math.floor((double)this.workingPos.x);
-            int by = (int)Math.floor((double)this.workingPos.y);
-            int bz = (int)Math.floor((double)this.workingPos.z);
+            int bx = (int)Math.floor(this.workingPos.x);
+            int by = (int)Math.floor(this.workingPos.y);
+            int bz = (int)Math.floor(this.workingPos.z);
             int dx = 0;
             int dy = 0;
             int dz = 0;
@@ -344,9 +345,9 @@ public class BlockSelection {
             args.put("blockPos", blockPos);
             args.put("timeSinceLastInteract", timeSinceLastInteract);
 
-            for(int i = 0; i < triggers.length; ++i) {
-               triggers[i].act(blockState, zone, args);
-            }
+             for (BlockEventTrigger trigger : triggers) {
+                 trigger.act(blockState, zone, args);
+             }
          }
       }
    }
@@ -412,9 +413,9 @@ public class BlockSelection {
             args.put("targetBlockState", targetBlockState);
             args.put("timeSinceLastInteract", timeSinceLastInteract);
 
-            for(int i = 0; i < triggers.length; ++i) {
-               triggers[i].act(targetBlockState, zone, args);
-            }
+             for (BlockEventTrigger trigger : triggers) {
+                 trigger.act(targetBlockState, zone, args);
+             }
          }
       }
    }
@@ -439,9 +440,9 @@ public class BlockSelection {
             args.put("interactHeld", interactHeld);
             args.put("timeSinceLastInteract", timeSinceLastInteract);
 
-            for(int i = 0; i < triggers.length; ++i) {
-               triggers[i].act(blockState, zone, args);
-            }
+             for (BlockEventTrigger trigger : triggers) {
+                 trigger.act(blockState, zone, args);
+             }
          }
       }
    }
