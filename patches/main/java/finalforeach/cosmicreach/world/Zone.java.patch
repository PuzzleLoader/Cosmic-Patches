diff --git a/src/main/java/finalforeach/cosmicreach/world/Zone.java b/src/main/java/finalforeach/cosmicreach/world/Zone.java
index 48b9b09..49e4668 100644
--- a/src/main/java/finalforeach/cosmicreach/world/Zone.java
+++ b/src/main/java/finalforeach/cosmicreach/world/Zone.java
@@ -19,16 +19,18 @@ import finalforeach.cosmicreach.worldgen.ZoneGenerator;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.util.Comparator;
 import java.util.Map;
 import java.util.PriorityQueue;
 import java.util.concurrent.ConcurrentHashMap;
 
+
 public class Zone implements Json.Serializable, Disposable {
-   public PriorityQueue<ScheduledTrigger> eventQueue = new PriorityQueue<>((a, b) -> a.triggerTick() - b.triggerTick());
+   public PriorityQueue<ScheduledTrigger> eventQueue = new PriorityQueue<>(Comparator.comparingInt(ScheduledTrigger::triggerTick));
    public int currentTick = 0;
    private final Point3DMap<Chunk> chunks = new Point3DMap<>();
    private final Map<RegionCoords, Region> regionMap = new ConcurrentHashMap<>();
-   private transient Region[] regionValues = this.regionMap.values().toArray(new Region[this.regionMap.size()]);
+   private transient Region[] regionValues = this.regionMap.values().toArray(new Region[0]);
    public Array<Entity> allEntities = new Array<>();
    public Vector3 spawnPoint;
    public String zoneId;
@@ -36,8 +38,7 @@ public class Zone implements Json.Serializable, Disposable {
    public float respawnHeight = -64.0F;
    private transient World world;
 
-   private Zone() {
-   }
+   private Zone() {}
 
    public Zone(World world, String zoneId, ZoneGenerator worldGen) {
       this.world = world;
@@ -171,7 +172,7 @@ public class Zone implements Json.Serializable, Disposable {
 
       synchronized(this.getRegionLock()) {
          this.regionMap.remove(new RegionCoords(r.regionX, r.regionY, r.regionZ));
-         this.regionValues = this.regionMap.values().toArray(new Region[this.regionMap.size()]);
+         this.regionValues = this.regionMap.values().toArray(new Region[0]);
       }
 
       GameSingletons.zoneRenderer.removeRegion(r);
@@ -233,7 +234,7 @@ public class Zone implements Json.Serializable, Disposable {
    }
 
    public BlockEntity getBlockEntity(Chunk candidateChunk, int x, int y, int z) {
-      return this.get(candidateChunk, x, y, z, (c, lx, ly, lz) -> c.getBlockEntity(lx, ly, lz));
+      return this.get(candidateChunk, x, y, z, Chunk::getBlockEntity);
    }
 
    public BlockState getBlockState(float x, float y, float z) {
@@ -258,13 +259,12 @@ public class Zone implements Json.Serializable, Disposable {
       int cz = Math.floorDiv(z, 16);
       Chunk c = null;
 
-      for(int ci = 0; ci < candidateChunks.length; ++ci) {
-         Chunk candidateChunk = candidateChunks[ci];
-         if (candidateChunk != null && candidateChunk.chunkX == cx && candidateChunk.chunkY == cy && candidateChunk.chunkZ == cz) {
-            c = candidateChunk;
-            break;
-         }
-      }
+       for (Chunk candidateChunk : candidateChunks) {
+           if (candidateChunk != null && candidateChunk.chunkX == cx && candidateChunk.chunkY == cy && candidateChunk.chunkZ == cz) {
+               c = candidateChunk;
+               break;
+           }
+       }
 
       if (c == null) {
          c = this.getChunkAtBlock(x, y, z);
@@ -281,7 +281,7 @@ public class Zone implements Json.Serializable, Disposable {
    }
 
    public BlockState getBlockState(Chunk candidateChunk, int x, int y, int z) {
-      return this.get(candidateChunk, x, y, z, (c, lx, ly, lz) -> c.getBlockState(lx, ly, lz));
+      return this.get(candidateChunk, x, y, z, Chunk::getBlockState);
    }
 
    public BlockState getBlockState(Chunk candidateChunk, Chunk candidateChunkB, int x, int y, int z) {
@@ -389,7 +389,7 @@ public class Zone implements Json.Serializable, Disposable {
 
    @Override
    public void dispose() {
-      this.chunks.forEach(c -> c.dispose());
+      this.chunks.forEach(Chunk::dispose);
    }
 
    public void calculateSpawn() {
